"""
Django settings for config project.
Generated by 'django-admin startproject' using Django 5.2.6.
"""

from pathlib import Path
import os

# --- Paths ---
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Seguridad (solo dev) ---
SECRET_KEY = "django-insecure-fp-p1v73$)v$)bbr*0o7=)v6-bgfs2eyyvqbchmu^bz^an1ax9"
DEBUG = True

# --- Hosts / CSRF (incluye ngrok) ---
ALLOWED_HOSTS = ["127.0.0.1", "localhost", "usuarios.autocs.cl", ".ngrok-free.app"]
CSRF_TRUSTED_ORIGINS = [
    "https://usuarios.autocs.cl",
    "https://*.ngrok-free.app",  # admite cualquier subdominio ngrok
]
# Si sirves detrás de proxy/ingress que termina SSL (ngrok, nginx, etc.)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# --- Apps ---
INSTALLED_APPS = [
    # Django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core.apps.CoreConfig",

    # Requerido por allauth
    "django.contrib.sites",

    # Allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    
]

SITE_ID = 1

# --- Auth / Allauth ---
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",                    # admin, etc.
    "allauth.account.auth_backends.AuthenticationBackend",         # allauth
]

# Ajustes simples para dev (puedes afinarlos luego)
ACCOUNT_EMAIL_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_AUTHENTICATION_METHOD = "username"

# A dónde van las rutas de login/logout (usamos allauth directamente)
LOGIN_URL = "account_login"       # /accounts/login/
LOGIN_REDIRECT_URL = "account"
LOGOUT_REDIRECT_URL = "pricing"

# --- Middleware ---
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # requerido por allauth
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

# --- Templates (único bloque, sin duplicados) ---
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # carpeta global de templates
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",  # necesario para allauth
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# --- Base de datos (rápido: SQLite) ---
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "saas20",
        "USER": "postgres",
        "PASSWORD": "Luquitasx8", 
        "HOST": "127.0.0.1",
        "PORT": "5432",
    }
}
# --- Validación de contraseñas ---
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# --- Internacionalización ---
LANGUAGE_CODE = "es"
TIME_ZONE = "America/Santiago"
USE_I18N = True
USE_TZ = True

# --- Estáticos / Media ---
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]  # crea BASE_DIR/static cuando la uses

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# --- Clave por defecto de PK ---
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# --- URLs públicas (para back_urls en MP) ---
# En local usa http://127.0.0.1:8000; con ngrok exporta:
#   PUBLIC_BASE_URL="https://<tu-ngrok>.ngrok-free.app"
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL", "http://127.0.0.1:8000")

# --- Mercado Pago (desde variables de entorno) ---
MP_ACCESS_TOKEN   = os.getenv("MP_ACCESS_TOKEN", "")
MP_PUBLIC_KEY     = os.getenv("MP_PUBLIC_KEY", "")
MP_WEBHOOK_SECRET = os.getenv("MP_WEBHOOK_SECRET", "dev-secret")
# En local déjalo vacío; con ngrok exporta:
#   MP_WEBHOOK_URL="https://<ngrok>/webhooks/mercadopago"
MP_WEBHOOK_URL    = os.getenv("MP_WEBHOOK_URL", "")
